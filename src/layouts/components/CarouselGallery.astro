---
// Componente de carrusel de galería para productos
import ImageMod from "@/components/ImageMod.astro";

// Lista de imágenes de la galería
const galleryImages = [
  "MR[250902-020930][01-37].jpg",
  "MR[250902-021025][02-37].jpg",
  "MR[250902-021049][04-37].jpg",
  "MR[250902-021139][05-37].jpg",
  "MR[250902-021205][06-37].jpg",
  "MR[250902-021219][07-37].jpg",
  "MR[250902-021247][08-37].jpg",
  "MR[250902-021317][09-37].jpg",
  "MR[250902-021346][10-37].jpg",
  "MR[250902-021437][11-37].jpg",
  "MR[250902-021445][12-37].jpg",
  "MR[250902-021843][13-37].jpg",
  "MR[250902-021938][14-37].jpg",
  "MR[250902-021958][15-37].jpg",
  "MR[250902-022015][16-37].jpg",
  "MR[250902-022230][17-37].jpg",
  "MR[250902-022333][18-37].jpg",
  "MR[250902-022400][19-37].jpg",
  "MR[250902-022726][20-37].jpg",
  "MR[250902-022830][21-37].jpg",
  "MR[250902-023013][22-37].jpg",
  "MR[250902-023115][23-37].jpg",
  "MR[250902-023216][24-37].jpg",
  "MR[250902-023338][25-37].jpg",
  "MR[250902-023549][26-37].jpg",
  "MR[250902-023745][27-37].jpg",
  "MR[250902-024210][28-37].jpg",
  "MR[250902-024322][29-37].jpg",
  "MR[250902-024415][30-37].jpg",
  "MR[250902-024516][31-37].jpg",
  "MR[250902-024750][32-37].jpg",
  "MR[250902-025218][33-37].jpg",
  "MR[250902-025244][34-37].jpg",
  "MR[250902-025829][35-37].jpg",
  "MR[250902-025847][36-37].jpg",
  "MR[250902-030011][37-37].jpg",
  "local-day2.png",
  "local-noon.png",
];

// Función para seleccionar imágenes aleatorias
function getRandomImages(images: string[], count: number): string[] {
  const shuffled = [...images].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

// Seleccionar 20 imágenes aleatorias y duplicarlas para el efecto infinito
const selectedImages = getRandomImages(galleryImages, 20);
const allImages = [...selectedImages, ...selectedImages, ...selectedImages];
---

<section class="py-8">
  <div class="container">
    <div class="relative overflow-hidden carousel-wrapper">
      <button class="nav-button prev" aria-label="Imagen anterior"> ‹ </button>
      <button class="nav-button next" aria-label="Imagen siguiente"> › </button>
      <div class="carousel-container flex animate-slide" id="carousel">
        {
          allImages.map((image, index) => (
            <div class="flex-shrink-0 w-80 h-60 mx-2 carousel-item">
              <ImageMod
                src={`/images/gallery/${image}`}
                alt={`Producto regional ${index + 1}`}
                width={320}
                height={240}
                class="w-full h-full object-cover rounded-lg shadow-md"
                format="webp"
              />
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const carousel = document.getElementById("carousel") as HTMLElement;
    const prevBtn = document.querySelector(
      ".nav-button.prev",
    ) as HTMLButtonElement;
    const nextBtn = document.querySelector(
      ".nav-button.next",
    ) as HTMLButtonElement;
    const items = document.querySelectorAll(".carousel-item");

    if (!carousel || !prevBtn || !nextBtn || items.length === 0) return;

    const itemWidth = (items[0] as HTMLElement).offsetWidth + 16; // width + margin
    let currentPosition = 0;
    let isAnimating = false;
    let autoAnimationPaused = false;

    // Función para mover el carrusel
    function moveCarousel(direction: "next" | "prev") {
      if (isAnimating) return;
      isAnimating = true;

      // Pausar animación automática al usar navegación manual
      if (!autoAnimationPaused) {
        carousel.style.animation = "none";
        autoAnimationPaused = true;
      }

      if (direction === "next") {
        currentPosition -= itemWidth;
        // Si llega al final, vuelve al inicio
        if (Math.abs(currentPosition) >= itemWidth * 20) {
          currentPosition = 0;
        }
      } else {
        currentPosition += itemWidth;
        // Si llega al inicio, va al final
        if (currentPosition > 0) {
          currentPosition = -itemWidth * 19;
        }
      }

      carousel.style.transform = `translateX(${currentPosition}px)`;

      setTimeout(() => {
        isAnimating = false;
      }, 500);
    }

    // Función para reanudar animación automática
    function resumeAutoAnimation() {
      if (autoAnimationPaused) {
        setTimeout(() => {
          carousel.style.animation = "";
          autoAnimationPaused = false;
        }, 3000); // Reanudar después de 3 segundos de inactividad
      }
    }

    // Event listeners para los botones
    prevBtn.addEventListener("click", () => {
      moveCarousel("prev");
      resumeAutoAnimation();
    });

    nextBtn.addEventListener("click", () => {
      moveCarousel("next");
      resumeAutoAnimation();
    });

    // Pausar animación automática al hacer hover
    const carouselWrapper = document.querySelector(
      ".carousel-wrapper",
    ) as HTMLElement;
    if (carouselWrapper) {
      carouselWrapper.addEventListener("mouseenter", () => {
        carousel.style.animationPlayState = "paused";
      });

      carouselWrapper.addEventListener("mouseleave", () => {
        if (!autoAnimationPaused) {
          carousel.style.animationPlayState = "running";
        }
      });
    }

    // Soporte para touch/swipe en móviles
    let startX = 0;
    let isDragging = false;

    carousel.addEventListener("touchstart", (e) => {
      startX = e.touches[0].clientX;
      isDragging = true;
      carousel.style.animationPlayState = "paused";
      if (!autoAnimationPaused) {
        carousel.style.animation = "none";
        autoAnimationPaused = true;
      }
    });

    carousel.addEventListener("touchmove", (e) => {
      if (!isDragging) return;
      const currentX = e.touches[0].clientX;
      const diff = startX - currentX;

      if (Math.abs(diff) > 50) {
        if (diff > 0) {
          moveCarousel("next");
        } else {
          moveCarousel("prev");
        }
        isDragging = false;
      }
    });

    carousel.addEventListener("touchend", () => {
      isDragging = false;
      resumeAutoAnimation();
    });
  });
</script>

<style>
  @keyframes slide {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-66.67%);
    }
  }

  .animate-slide {
    animation: slide 60s linear infinite;
  }

  .carousel-container {
    transition: transform 0.5s ease;
  }

  .carousel-container:hover {
    animation-play-state: paused;
  }

  /* Navigation buttons */
  .nav-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(223, 109, 45, 0.8);
    color: white;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    opacity: 0;
  }

  .carousel-wrapper:hover .nav-button {
    opacity: 1;
  }

  .nav-button:hover {
    background: rgba(223, 109, 45, 1);
    transform: translateY(-50%) scale(1.1);
  }

  .nav-button.prev {
    left: 10px;
  }

  .nav-button.next {
    right: 10px;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .carousel-container > div {
      width: 250px;
      height: 188px;
      margin: 0 8px;
    }

    .nav-button {
      width: 35px;
      height: 35px;
    }
  }

  @media (max-width: 480px) {
    .carousel-container > div {
      width: 190px;
      height: 142px;
      margin: 0 4px;
    }

    .nav-button {
      width: 30px;
      height: 30px;
    }
  }
</style>
