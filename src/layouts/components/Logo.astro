---
import config from "@/config/config.json";
import type { ImageMetadata } from "astro";
import ImageMod from "./ImageMod.astro";

// Static import attempts (wrapped in try/catch not available in .astro frontmatter directly)
// We use eager glob to detect if files have already been moved to assets.
const assetLogos = import.meta.glob<{
  default: ImageMetadata;
}>("/src/assets/images/**/*.{png,webp,svg}", { eager: true });

const findAsset = (filename: string) => {
  const entry = Object.entries(assetLogos).find(([full]) =>
    full.endsWith(filename),
  );
  return entry ? entry[1].default : undefined;
};

const {
  src,
  srcDarkmode,
}: { src?: string | ImageMetadata; srcDarkmode?: string | ImageMetadata } =
  Astro.props;
const {
  logo,
  logo_darkmode,
  logo_width,
  logo_height,
  logo_text,
  title,
}: {
  logo: string;
  logo_darkmode: string;
  logo_width: any;
  logo_height: any;
  logo_text: string;
  title: string;
} = config.site;

const { theme_switcher }: { theme_switcher: boolean } = config.settings;

// Search for optimized versions if they exist in assets
const lightMeta = findAsset("logo.webp") || findAsset("logo.png") || undefined;
const darkMeta =
  findAsset("logo-darkmode.webp") ||
  findAsset("logo-darkmode.png") ||
  undefined;

// Prioritize received props > imported metadata > config paths
const effectiveLight = src || lightMeta || logo;
const effectiveDark = srcDarkmode || darkMeta || logo_darkmode;

// Calculate numeric width/height (if they come with px, keep as before)
const w = Number(String(logo_width).replace("px", ""));
const h = Number(String(logo_height).replace("px", ""));
---

<a href="/" class="navbar-brand inline-block">
  {
    effectiveLight || effectiveDark ? (
      <>
        <ImageMod
          src={effectiveLight}
          class={`inline-block ${theme_switcher && "dark:hidden"}`}
          width={w * 2}
          height={h * 2}
          alt={`Logo de ${title}`}
          style={{
            height: h + "px",
            width: w + "px",
          }}
          format="webp"
          aboveTheFold={true}
        />
        {theme_switcher && effectiveDark && (
          <ImageMod
            src={effectiveDark}
            class={"hidden dark:inline-block"}
            width={w * 2}
            height={h * 2}
            alt={`Logo de ${title} (modo oscuro)`}
            style={{
              height: h + "px",
              width: w + "px",
            }}
            format="webp"
          />
        )}
      </>
    ) : logo_text ? (
      logo_text
    ) : (
      title
    )
  }
</a>
